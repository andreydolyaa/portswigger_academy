######################################################################################################################################
How to detect SQL injection vulnerabilities:
######################################################################################################################################

You can detect SQL injection manually using a systematic set of tests against every entry point in the application. 
To do this, you would typically submit - 

- The single quote character ' and look for errors or other anomalies.
- Some SQL-specific syntax that evaluates to the base (original) value of the entry point, and to a different value, 
  and look for systematic differences in the application responses.
- Boolean conditions such as OR 1=1 and OR 1=2, and look for differences in the application's responses.
- Payloads designed to trigger time delays when executed within a SQL query, and look for differences in the time 
  taken to respond.
- OAST payloads designed to trigger an out-of-band network interaction when executed within a SQL query, and monitor 
  any resulting interactions.

Alternatively, you can find the majority of SQL injection vulnerabilities quickly and reliably using Burp Scanner.






######################################################################################################################################
SQL injection in different parts of the query:
######################################################################################################################################

Most SQL injection vulnerabilities occur within the WHERE clause of a SELECT query. Most experienced testers are 
familiar with this type of SQL injection.

However, SQL injection vulnerabilities can occur at any location within the query, and within different query types. 
Some other common locations where SQL injection arises are -

- In UPDATE statements, within the updated values or the WHERE clause.
- In INSERT statements, within the inserted values.
- In SELECT statements, within the table or column name.
- In SELECT statements, within the ORDER BY clause.







######################################################################################################################################
Retrieving hidden data:
######################################################################################################################################

Imagine a shopping application that displays products in different categories. When the user clicks on the Gifts category, 
their browser requests the URL -

! https://insecure-website.com/products?category=Gifts !

This causes the application to make a SQL query to retrieve details of the relevant products from the database -

! SELECT * FROM products WHERE category = 'Gifts' AND released = 1 !

This SQL query asks the database to return -

- all details (*)
- from the products table
- where the category is Gifts
- and released is 1.
- The restriction released = 1 is being used to hide products that are not released. We could assume for unreleased products, released = 0.









######################################################################################################################################
Retrieving hidden data - Continued:
######################################################################################################################################

The application doesn't implement any defenses against SQL injection attacks. This means an attacker can construct the 
following attack, for example -

! https://insecure-website.com/products?category=Gifts'-- !

This results in the SQL query -

! SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1 !

Crucially, note that -- is a comment indicator in SQL. This means that the rest of the query is interpreted as a comment, 
effectively removing it. In this example, this means the query no longer includes AND released = 1. As a result, all products are displayed, 
including those that are not yet released.

You can use a similar attack to cause the application to display all the products in any category, 
including categories that they don't know about -

! https://insecure-website.com/products?category=Gifts'+OR+1=1-- !

This results in the SQL query -

! SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1 !

The modified query returns all items where either the category is Gifts, or 1 is equal to 1. As 1=1 is always true, the query returns all items.

- Warning -
  Take care when injecting the condition OR 1=1 into a SQL query. Even if it appears to be harmless in the context you're injecting into, 
  it's common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or 
  DELETE statement, for example, it can result in an accidental loss of data.









######################################################################################################################################
Subverting application logic:
######################################################################################################################################

Imagine an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, 
the application checks the credentials by performing the following SQL query - 

! SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese' !

If the query returns the details of a user, then the login is successful. Otherwise, it is rejected.

In this case, an attacker can log in as any user without the need for a password. They can do this using the SQL comment 
sequence -- to remove the password check from the WHERE clause of the query. 
For example, submitting the username administrator'-- and a blank password results in the following query -

! SELECT * FROM users WHERE username = 'administrator'--' AND password = '' !

This query returns the user whose username is administrator and successfully logs the attacker in as that user.









######################################################################################################################################
SQL injection UNION attacks:
######################################################################################################################################
When an application is vulnerable to SQL injection, and the results of the query are returned within the application's responses, 
you can use the UNION keyword to retrieve data from other tables within the database. This is commonly known as a SQL injection UNION attack.
The UNION keyword enables you to execute one or more additional SELECT queries and append the results to the original query. For example -

! SELECT a, b FROM table1 UNION SELECT c, d FROM table2 !

This SQL query returns a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2.










######################################################################################################################################
SQL injection UNION attacks - Continued:
######################################################################################################################################

For a UNION query to work, two key requirements must be met -
- The individual queries must return the same number of columns.
- The data types in each column must be compatible between the individual queries.

To carry out a SQL injection UNION attack, make sure that your attack meets these two requirements. This normally involves finding out -
- How many columns are being returned from the original query.
- Which columns returned from the original query are of a suitable data type to hold the results from the injected query.















######################################################################################################################################
Determining the number of columns required:
######################################################################################################################################

When you perform a SQL injection UNION attack, there are two effective methods to determine how many columns are being 
returned from the original query.

One method involves injecting a series of ORDER BY clauses and incrementing the specified column index until an error occurs. 
For example, if the injection point is a quoted string within the WHERE clause of the original query, you would submit -

' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--
etc.

This series of payloads modifies the original query to order the results by different columns in the result set. The column 
in an ORDER BY clause can be specified by its index, so you don't need to know the names of any columns. When the specified 
column index exceeds the number of actual columns in the result set, the database returns an error, such as - 

! The ORDER BY position number 3 is out of range of the number of items in the select list. !

The application might actually return the database error in its HTTP response, but it may also issue a generic error response. 
In other cases, it may simply return no results at all. Either way, as long as you can detect some difference in the response, 
you can infer how many columns are being returned from the query.












######################################################################################################################################
Determining the number of columns required - Continued:
######################################################################################################################################

The second method involves submitting a series of UNION SELECT payloads specifying a different number of null values - 

' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
etc.

If the number of nulls does not match the number of columns, the database returns an error, such as -

! All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists. !

We use NULL as the values returned from the injected SELECT query because the data types in each column must be compatible 
between the original and the injected queries. NULL is convertible to every common data type, so it maximizes the chance 
that the payload will succeed when the column count is correct.

As with the ORDER BY technique, the application might actually return the database error in its HTTP response, but may return 
a generic error or simply return no results. When the number of nulls matches the number of columns, the database returns an 
additional row in the result set, containing null values in each column. The effect on the HTTP response depends on the application's code. 
If you are lucky, you will see some additional content within the response, such as an extra row on an HTML table. Otherwise, 
the null values might trigger a different error, such as a NullPointerException. In the worst case, the response might look the same as a 
response caused by an incorrect number of nulls. This would make this method ineffective.










######################################################################################################################################
Database-specific syntax:
######################################################################################################################################

On Oracle, every SELECT query must use the FROM keyword and specify a valid table. There is a built-in table on Oracle 
called dual which can be used for this purpose. So the injected queries on Oracle would need to look like -

! ' UNION SELECT NULL FROM DUAL-- !

The payloads described use the double-dash comment sequence -- to comment out the remainder of the original query following 
the injection point. On MySQL, the double-dash sequence must be followed by a space. 
Alternatively, the hash character "#" can be used to identify a comment.

For more details of database-specific syntax, see the SQL injection cheat sheet. "https://portswigger.net/web-security/sql-injection/cheat-sheet".












######################################################################################################################################
Finding columns with a useful data type:
######################################################################################################################################

A SQL injection UNION attack enables you to retrieve the results from an injected query. The interesting data that you want to 
retrieve is normally in string form. This means you need to find one or more columns in the original query results whose 
data type is, or is compatible with, string data.

After you determine the number of required columns, you can probe each column to test whether it can hold string data. 
You can submit a series of UNION SELECT payloads that place a string value into each column in turn. For example, 
if the query returns four columns, you would submit -

' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--

If the column data type is not compatible with string data, the injected query will cause a database error, such as -

! Conversion failed when converting the varchar value 'a' to data type int. !

If an error does not occur, and the application's response contains some additional content including the injected string value, 
then the relevant column is suitable for retrieving string data.

steps to finding columns containing text - 

This lab contains a SQL injection vulnerability in the product category filter. The results from the query are 
returned in the application's response, so you can use a UNION attack to retrieve data from other tables. 
To construct such an attack, you first need to determine the number of columns returned by the query. 
You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.
The lab will provide a random value that you need to make appear within the query results. 
To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. 
This technique helps you determine which columns are compatible with string data.












######################################################################################################################################
Using a SQL injection UNION attack to retrieve interesting data:
######################################################################################################################################

When you have determined the number of columns returned by the original query and found which columns can hold string data, 
you are in a position to retrieve interesting data.

Suppose that -
    - The original query returns two columns, both of which can hold string data.
    - The injection point is a quoted string within the WHERE clause.
    - The database contains a table called users with the columns username and password.

In this example, you can retrieve the contents of the users table by submitting the input -

! ' UNION SELECT username, password FROM users-- !

In order to perform this attack, you need to know that there is a table called users with two columns called username and password. 
Without this information, you would have to guess the names of the tables and columns. All modern databases provide ways to examine 
the database structure, and determine what tables and columns they contain.

burpsuite - ! GET /filter?category=Pets' UNION SELECT username, password FROM users-- HTTP/2 !
















######################################################################################################################################
Retrieving multiple values within a single column:
######################################################################################################################################

In some cases the query in the previous example may only return a single column.
You can retrieve multiple values together within this single column by concatenating the values together. 
You can include a separator to let you distinguish the combined values. For example, on Oracle you could submit the input -

! ' UNION SELECT username || '~' || password FROM users-- !

This uses the double-pipe sequence || which is a string concatenation operator on Oracle. 
The injected query concatenates together the values of the username and password fields, separated by the ~ character.

The results from the query contain all the usernames and passwords, for example -

...
administrator~s3cure
wiener~peter
carlos~montoya
...

Different databases use different syntax to perform string concatenation. For more details, see the SQL injection cheat sheet.
"https://portswigger.net/web-security/sql-injection/cheat-sheet".

Concat - 
! UNION SELECT CONCAT(username, ':', password) AS credentials FROM users; !

Final Lab Payload To Extract All Usernames And credentials - 
! GET /filter?category=Accessories' UNION SELECT NULL, username || '_' || password FROM users-- HTTP/2 !
Above, We found out that there's 2 columns, and one cloumn only accepts String data, so we injected to it the username and password.













######################################################################################################################################
Examining the database in SQL injection attacks:
######################################################################################################################################

To exploit SQL injection vulnerabilities, it's often necessary to find information about the database. This includes -

- The type and version of the database software.
- The tables and columns that the database contains.









######################################################################################################################################
Querying the database type and version:
######################################################################################################################################

You can potentially identify both the database type and version by injecting provider-specific queries to see if one works
The following are some queries to determine the database version for some popular database types - 

#Database type	       Query
Microsoft, MySQL	     SELECT @@version
Oracle	               SELECT * FROM v$version
PostgreSQL	           SELECT version()

For example, you could use a UNION attack with the following input - 

! ' UNION SELECT @@version-- !

This might return the following output. In this case, you can confirm that the database is Microsoft SQL Server and see the version used -

# Microsoft SQL Server 2016 (SP2) (KB4052908) - 13.0.5026.0 (X64)
# Mar 18 2018 09:11:49
# Copyright (c) Microsoft Corporation
# Standard Edition (64-bit) on Windows Server 2016 Standard 10.0 <X64> (Build 14393: ) (Hypervisor)

NOTE - "--" WILL NOT WORK ALL THE TIME, IT'S DB DEPENDANT, TRY "#" ALSO!













######################################################################################################################################
Listing the contents of the database:
######################################################################################################################################

Most database types (except Oracle) have a set of views called the information schema. This provides information about the database.
For example, you can query information_schema.tables to list the tables in the database -

! SELECT * FROM information_schema.tables !

This returns output like the following -

TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  TABLE_TYPE
=====================================================
MyDatabase     dbo           Products    BASE TABLE
MyDatabase     dbo           Users       BASE TABLE
MyDatabase     dbo           Feedback    BASE TABLE

This output indicates that there are three tables, called Products, Users, and Feedback.
You can then query information_schema.columns to list the columns in individual tables

! SELECT * FROM information_schema.columns WHERE table_name = 'Users' !

This returns output like the following - 

TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  COLUMN_NAME  DATA_TYPE
=================================================================
MyDatabase     dbo           Users       UserId       int
MyDatabase     dbo           Users       Username     varchar
MyDatabase     dbo           Users       Password     varchar

This output shows the columns in the specified table and the data type of each column.



Lab Payload To Retrive All Table - 
(At the beggining i tried to use NULL, "*" FROM information_schema.tables--, but the * did not work, so i used "table_name").
! GET /filter?category=Pets' UNION SELECT NULL, table_name FROM information_schema.tables-- HTTP/2 !

now we found a list of tables, we can check which table contains users data, we can do it like this - 

! GET /filter?category=Pets' UNION SELECT column_name, data_type FROM information_schema.columns WHERE table_name='pg_user'-- !

this line check which columns exists and what data type are they (both native command of sql), we see in the result that theres 2 interesting
columns one named "passwd" of tpye "text" and other "usename" of type "name", now we can try to inject/view those 2 fields -

First i tried to get the fields like this - 

! GET /filter?category=Pets' UNION SELECT username_cxuklq, password_hnxsvl FROM information_schema.columns WHERE table_name='users_ttbxl'-- !

but it not worked, then i realized, that i try to get the username and password by querying first the information_schema and the information_schema
will query the table_name=users_ttbxl, this is wrong, we can directly query the users_ttbxl like this - 

! /filter?category=Pets' UNION SELECT username_cxuklq, password_hnxsvl FROM users_ttbxnl-- !

this revelad us all the usernames and password in that table !
        